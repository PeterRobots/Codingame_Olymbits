use std::io;
use std::collections::{VecDeque, HashMap};


macro_rules! parse_input {
    ($x:expr, $t:ident) => ($x.trim().parse::<$t>().unwrap())
}

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
fn main() {
    let mut input_line = String::new();
    io::stdin().read_line(&mut input_line).unwrap();
    let player_idx = parse_input!(input_line, i32);
    let mut input_line = String::new();
    io::stdin().read_line(&mut input_line).unwrap();
    let nb_games = parse_input!(input_line, i32);
    let mut pos: [i32; 4] = [0,0,0,0];
    let mut stun_timer: [i32; 4] = [0,0,0,0];
    let mut stun_counter: [i32; 4] = [0,0,0,0];
    let start: i32 = 0;
    let end: i32 = 30;
    let hurdles: &mut[VecDeque<i32>] = &mut[VecDeque::new(),VecDeque::new(),VecDeque::new(),VecDeque::new()];
    let mut dist: [i32; 4] = [0,0,0,0];
    // let move_speed: Vec<String> = vec!["UP".to_string(),"LEFT".to_string(),"DOWN".to_string(),"RIGHT".to_string()];
    let move_speed: &[&str] = &["UP", "LEFT", "DOWN", "RIGHT"];
    let mut game_time: i32 = 0;
    let mut match_counter: i32 = 0;
    let mut place: [usize; 4] = [0,0,0,0];
    let mut total_dist: [i32; 4] = [0, 0, 0, 0];
    let mut gap: [i32; 4] = [0, 0, 0, 0];

    eprintln!("Game time {}",game_time);
    // game loop
    loop {
        let mut priority: [f32; 4] = [0.0,0.0,0.0,0.0];
        for i in 0..3 as usize {
            let mut input_line = String::new();
            io::stdin().read_line(&mut input_line).unwrap();
            let score_info = input_line.trim_matches('\n').to_string();
            // eprintln!("Player {} Score {}",i, score_info);
        }
        for i in 0..nb_games as usize {
            // eprintln!("Game {}",i);
            let mut input_line = String::new();
            io::stdin().read_line(&mut input_line).unwrap();
            let inputs = input_line.split(" ").collect::<Vec<_>>();
            // Ascii representation of track . space # hurdle
            let gpu = inputs[0].trim().to_string();

            // Player Positions 1, 2, 3
            let reg_0 = parse_input!(inputs[1], i32);
            let reg_1 = parse_input!(inputs[2], i32);
            let reg_2 = parse_input!(inputs[3], i32);
            // Player Stun timers 1,2,3
            let reg_3 = parse_input!(inputs[4], i32);
            let reg_4 = parse_input!(inputs[5], i32);
            let reg_5 = parse_input!(inputs[6], i32);
            let reg_6 = parse_input!(inputs[7], i32);

            if player_idx == 0 {
                pos[i] = reg_0;
                stun_timer[i] = reg_3;
            } else if player_idx == 1 {
                pos[i] = reg_1;
                stun_timer[i] = reg_4;
            } else if player_idx == 2 {
                pos[i] = reg_2;
                stun_timer[i] = reg_5;
            } else {
                eprintln!("Error cannot find player!");
                pos[i] = start;
                stun_timer[i] = 0;
            }

            // Place 
            let mut player_positions: Vec<i32> = vec![reg_0, reg_1, reg_2];
            player_positions.sort();
            place[i] = player_positions.iter().position(|&r| r == pos[i]).unwrap() + 1;

            // Gap
            player_positions.remove(place[i]-1);
            gap[i] = player_positions.iter().map(|x| pos[i] - x).max().unwrap();

            // Stuns
            if stun_timer[i] == 2 {
                stun_counter[i] += 1;
            }
            

            // Hurdles
            let mut hurdle_iter = gpu.chars();
            let mut course_iter: i32 = start;
            if pos[i] == 0  {
                loop {
                    let ch = hurdle_iter.next();
                    if ch.is_none() {
                        break;
                    }
                    if ch.unwrap() == '#' {
                        hurdles[i].push_back(course_iter)
                    } 
                    course_iter+=1
                }    
                if i == 0 {
                    match_counter += 1;
                }
            }
            // eprintln!("Hurdles {:?}",hurdles[i]);
            
            hurdles[i].retain(|&x| x - pos[i] > 0);
            let mut hurdle: i32 = -1;
            if hurdles[i].len() > 0 {
                hurdle = hurdles[i][0];
            } 
            // Priority for game
            if stun_timer[i] > 0 || (end - pos[i]) / 3 > (100 - game_time) || pos[i] == end {
                priority[i] = 0.0;
            } else {
                priority[i] = 1.0 / (place[i] as f32);
                priority[i] /= (end - pos[i] + gap[i]) as f32;
                // priority[i] *= (1+pos[i]) as f32;
                // eprintln!("{}", priority[i]);
            }

            if hurdle > 0 {
                dist[i] = hurdle - pos[i];
            } else {
                dist[i] = end - pos[i];
            }
            // eprintln!("Match {}",match_counter);
            // eprintln!("Game time {}",game_time);
            // eprintln!("Player {}",player_idx);
            // eprintln!("Place {}",place[i]);
            // eprintln!("Hurdle {}",hurdle);
            // eprintln!("Distance {}",dist[i]);
            // eprintln!("Position {}",pos[i]);
            // eprintln!("Stunned for {}",stun_timer[i]);
            // eprintln!("Stun counter {}",stun_counter[i]);
            total_dist[i] = (match_counter-1) * end + pos[i];
            // eprintln!("Total Distance {}", total_dist[i]);
        }
        let mut index = 3 as usize;
        let total_priority:f32 = priority.iter().sum();
        let scaled_priority:[f32;4] = priority.map(|x:f32| x/total_priority);
        let min_dist:i32 = *dist.iter().min().unwrap();
        let max_dist:i32 = *dist.iter().max().unwrap();
        let mut intermediate_dist:Vec<f32> = vec![min_dist as f32,0.0];
        let mut m: HashMap<i32, usize> = HashMap::new();
        for d in dist {
            *m.entry(d).or_default() += 1;
        }
        eprintln!("{:?}",m);
        let counts: HashMap<i32, usize> = m.into_iter().filter(|(_,v)| *v>1).collect();
        let mut common_dist = min_dist;
        if counts.len() >= 1 {
            common_dist = counts.into_iter().max_by_key(|(_, v)| *v).map(|(k, _)| k).unwrap();
        }
        for (&p,&d) in scaled_priority.iter().zip(dist.iter()) {
            let mut priority = p;
            if d == common_dist {
                priority *= 2.0;
            }
            if priority > intermediate_dist[1] {
                intermediate_dist = vec![d as f32, p];
            }
        }
        //     intermediate_dist += (d - min_dist) as f32 * p;
        let priority_dist:i32 = intermediate_dist[0].round() as i32;
        eprintln!("Match {}",match_counter);
        eprintln!("Game time {}",game_time);
        eprintln!("Player {}",player_idx);
        eprintln!("Place {:?}",place);
        eprintln!("Gap {:?}",gap);
        eprintln!("Distance {:?}",dist);
        eprintln!("min_dist {}",min_dist);
        eprintln!("max_dist {}",max_dist);
        eprintln!("Priorities {:?}",priority);
        eprintln!("Priority_dist {:?}",priority_dist);
        eprintln!("Common_dist {:?}",common_dist);
        eprintln!("Position {:?}",pos);
        eprintln!("Stunned for {:?}",stun_timer);
        eprintln!("Stun counter {:?}",stun_counter);
        eprintln!("Total Distance {:?}", total_dist);
        if priority_dist <= 3 && priority_dist > 0 {
            index = priority_dist as usize;
            index -= 1;
        } 
        // index = common_dist.clamp(1, 3) as usize - 1;
        // index = min_dist.clamp(1, 3) as usize - 1;
        let direction: String = move_speed[index].to_string();
        // Write an action using println!("message...");
        // To debug: eprintln!("Debug message...");
        println!("{}", direction);
        game_time += 1;
    }
}
